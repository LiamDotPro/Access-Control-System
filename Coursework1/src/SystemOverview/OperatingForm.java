/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SystemOverview;

import AccessSystem.Architecture.Building;
import AccessSystem.Architecture.Campus;
import AccessSystem.Architecture.Floor;
import AccessSystem.Architecture.Room;
import AccessSystem.Controller;
import AccessSystem.Logging.EmergencyLogEntry;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * The operating form allows a user to change the current operating of a Campus,
 * Building, Floor or Room.
 *
 * @author Liam Read
 */
public class OperatingForm extends javax.swing.JFrame {

    private DefaultListModel architectureModel;
    private int CurrentLevel;
    private Controller controller;
    private Integer CampusIndex;
    private Integer buildingSelected;
    private Boolean OperatingType;
    private Boolean fieldPressed;
    private Integer floorSelected;
    private Integer roomSelected;
    private String universityName;

    /**
     * Default constructor that sets the form up. Form changes dependant on if
     * normal mode or emergency mode is passed.
     *
     * @param universityName The university name.
     * @param controller the current associated controller.
     * @param emergency if setting emergency or normal mode.
     */
    public OperatingForm(String universityName, Controller controller, boolean emergency) {
        this.architectureModel = new DefaultListModel();
        initComponents();
        this.universityName = universityName;
        this.controller = controller;
        this.CurrentLevel = 4;
        this.OperatingType = emergency;
        this.fieldPressed = false;
        if (OperatingType == true) {
            this.OperatingBtn.setText("Emergency");
        } else {
            this.OperatingBtn.setText("Normal Mode");
        }

        controller.getUniversities().getCampusList().stream().forEach((b) -> {
            this.architectureModel.addElement(b.getCampusName());
        });

    }

    /**
     * No arguments constructor.
     */
    private OperatingForm() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buildJPane = new javax.swing.JScrollPane();
        archList = new javax.swing.JList<>();
        AcceptChanges = new javax.swing.JButton();
        upLevel = new javax.swing.JButton();
        downLevel = new javax.swing.JButton();
        OperatingBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        mainMenuItem = new javax.swing.JMenuItem();
        ownerText = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        archList.setModel(architectureModel);
        archList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                archListMouseClicked(evt);
            }
        });
        buildJPane.setViewportView(archList);

        AcceptChanges.setText("Accept");
        AcceptChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcceptChangesActionPerformed(evt);
            }
        });

        upLevel.setText("Up Level");
        upLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upLevelActionPerformed(evt);
            }
        });

        downLevel.setText("Down Level");
        downLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downLevelActionPerformed(evt);
            }
        });

        OperatingBtn.setText("OperatingMode");
        OperatingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OperatingBtnActionPerformed(evt);
            }
        });

        mainMenu.setText("Start");
        mainMenu.setName("StartMenuBtn"); // NOI18N

        mainMenuItem.setText("Main Menu");
        mainMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(mainMenuItem);

        menuBar.add(mainMenu);

        ownerText.setText("Made by Liam Read");
        ownerText.setEnabled(false);
        menuBar.add(ownerText);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buildJPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(AcceptChanges, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(upLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downLevel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                    .addComponent(OperatingBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buildJPane, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(upLevel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(downLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OperatingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AcceptChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_mainMenuItemActionPerformed

    /**
     * This allows users to go up the different levels of the university model.
     *
     * @param evt
     */
    private void upLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upLevelActionPerformed
        try {
            if (CurrentLevel != 4) {
                switch (CurrentLevel) {
                    case 3:
                        this.architectureModel.clear();
                        controller.getUniversities().getCampusList().stream().forEach((b) -> {
                            this.architectureModel.addElement(b.getCampusName());
                        });
                        break;
                    case 2:
                        this.architectureModel.clear();
                        controller.getUniversities().getCampusList().get(CampusIndex).getBuilding().stream().forEach((b) -> {
                            this.architectureModel.addElement(b.getBuildingName());
                        });
                        break;
                    case 1:
                        this.architectureModel.clear();
                        controller.getUniversities().getCampusList().get(CampusIndex).getBuilding().get(buildingSelected).getFloorsInBuilding().stream().forEach((f) -> {
                            this.architectureModel.addElement(f.getFloorIdentifer());
                        });
                        break;
                }
                CurrentLevel++;
            }
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "You have gone out of Operating Range!", "Operating Range", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_upLevelActionPerformed

    private void downLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downLevelActionPerformed
        try {
            if (CurrentLevel != 1 || fieldPressed == false) {

                int CurrentIndex = archList.getSelectedIndex();

                switch (CurrentLevel) {
                    case 4:
                        this.architectureModel.clear();
                        controller.getUniversities().getCampusList().get(CampusIndex).getBuilding().stream().forEach((f) -> {
                            this.architectureModel.addElement(f.getBuildingName());
                        });
                        break;

                    case 3:
                        this.architectureModel.clear();
                        controller.getUniversities().getCampusList().get(CampusIndex).getBuilding().get(buildingSelected).getFloorsInBuilding().stream().forEach((f) -> {
                            this.architectureModel.addElement(f.getFloorIdentifer());
                        });
                        this.buildingSelected = CurrentIndex;
                        fieldPressed = false;
                        break;
                    case 2:
                        this.architectureModel.clear();
                        controller.getUniversities().getCampusList().get(CampusIndex).getBuilding().get(buildingSelected).getFloorsInBuilding().get(floorSelected).getRoomsOnFloor().stream().forEach((r) -> {
                            this.architectureModel.addElement(r.getRoomName());
                        });
                        this.floorSelected = CurrentIndex;
                        fieldPressed = false;
                        break;

                }

                CurrentLevel--;
            } else {
                JOptionPane.showMessageDialog(null, "You have not selected a new option OR tried to access something out of the possible parameters", "Operating Range", JOptionPane.WARNING_MESSAGE);
            }
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "You have not selected a new option OR tried to access something out of the possible parameters", "Operating Range", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_downLevelActionPerformed

    private void OperatingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OperatingBtnActionPerformed

        Campus selectedCampus = controller.getUniversities().getCampusList().get(CampusIndex);
        if (OperatingType == true) {
            switch (CurrentLevel) {
                case 4:
                    if (!"Emergency Mode".equals(selectedCampus.getCampusMode())) {
                        EmergencyLogEntry temp = new EmergencyLogEntry(selectedCampus.getCampusName(), JOptionPane.showInputDialog("Reason For setting Emergency?"));
                        selectedCampus.setEmergency(OperatingType);
                        try {
                            selectedCampus.getEmergencyLogger().log(temp, controller, this.universityName);
                        } catch (IOException ex) {
                            Logger.getLogger(OperatingForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        messageType();
                    } else {
                        JOptionPane.showMessageDialog(null, "Emergency mode already activated", "Emergency Activation", JOptionPane.WARNING_MESSAGE);
                    }
                    break;
                case 3:
                    Building building = selectedCampus.getBuilding().get(buildingSelected);
                    if (!"Emergency Mode".equals(building.getBuildingMode())) {
                        building.setEmergency(OperatingType);
                        EmergencyLogEntry temp = new EmergencyLogEntry(building.getBuildingName(), JOptionPane.showInputDialog("Reason For setting Emergency?"));

                        try {
                            building.getEmergencyLogger().log(temp, controller, this.universityName);
                        } catch (IOException ex) {
                            Logger.getLogger(OperatingForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        messageType();
                    } else {
                        JOptionPane.showMessageDialog(null, "Emergency mode already activated", "Emergency Activation", JOptionPane.WARNING_MESSAGE);
                    }

                    break;
                case 2:
                    Floor floor = selectedCampus.getBuilding().get(buildingSelected).getFloorsInBuilding().get(floorSelected);
                    if (!"Emergency Mode".equals(floor.getFloorMode())) {
                        EmergencyLogEntry temp = new EmergencyLogEntry(floor.getFloorIdentifer(), JOptionPane.showInputDialog("Reason For setting Emergency?"));
                        floor.setEmergency(OperatingType);

                        try {
                            floor.getEmergencyLogger().log(temp, controller, universityName);
                        } catch (IOException ex) {
                            Logger.getLogger(OperatingForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        messageType();
                    } else {
                        JOptionPane.showMessageDialog(null, "Emergency mode already activated", "Emergency Activation", JOptionPane.WARNING_MESSAGE);
                    }
                    break;
                case 1:
                    Room room = selectedCampus.getBuilding().get(buildingSelected).getFloorsInBuilding().get(floorSelected).getRoomsOnFloor().get(roomSelected);
                    if (!"Emergency Mode".equals(room.getRoomMode())) {
                        EmergencyLogEntry temp = new EmergencyLogEntry(room.getRoomName(), JOptionPane.showInputDialog("Reason For setting Emergency?"));
                        room.setEmergency(OperatingType);
                        try {
                            room.getEmergencyLogger().log(temp, controller, universityName);
                        } catch (IOException ex) {
                            Logger.getLogger(OperatingForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        messageType();
                    } else {
                        JOptionPane.showMessageDialog(null, "Emergency mode already activated", "Emergency Activation", JOptionPane.WARNING_MESSAGE);
                    }
                    break;
            }
        } else {
            try {
                switch (CurrentLevel) {
                    case 4:
                        selectedCampus.setEmergency(OperatingType);
                        messageType();
                    case 3:
                        selectedCampus.getBuilding().get(buildingSelected).setEmergency(OperatingType);
                        messageType();
                        break;
                    case 2:
                        selectedCampus.getBuilding().get(buildingSelected).getFloorsInBuilding().get(floorSelected).setEmergency(OperatingType);
                        messageType();
                        break;
                    case 1:
                        selectedCampus.getBuilding().get(buildingSelected).getFloorsInBuilding().get(floorSelected).getRoomsOnFloor().get(roomSelected).setEmergency(OperatingType);
                        messageType();
                        break;
                }
            } catch (NullPointerException e) {
                System.out.println("Selected campus not found.");
            }
        }
    }//GEN-LAST:event_OperatingBtnActionPerformed

    private void messageType() {

        String EmergencyMessage = "The room is now in EMERGENCY MODE";
        String NormalMessage = "The room is now in normal mode";

        if (OperatingType == true) {
            JOptionPane.showMessageDialog(null, EmergencyMessage, "Operating Range", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, NormalMessage, "Operating Range", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void archListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_archListMouseClicked
        switch (CurrentLevel) {

            case 4:
                CampusIndex = archList.getSelectedIndex();
                fieldPressed = true;
                break;
            case 3:
                buildingSelected = archList.getSelectedIndex();
                fieldPressed = true;
                break;
            case 2:
                floorSelected = archList.getSelectedIndex();
                fieldPressed = true;
                break;
            case 1:
                roomSelected = archList.getSelectedIndex();
                fieldPressed = true;
                break;
        }
    }//GEN-LAST:event_archListMouseClicked

    private void AcceptChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptChangesActionPerformed
        this.dispose();
    }//GEN-LAST:event_AcceptChangesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OperatingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OperatingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OperatingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OperatingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OperatingForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptChanges;
    private javax.swing.JButton OperatingBtn;
    private javax.swing.JList<String> archList;
    private javax.swing.JScrollPane buildJPane;
    private javax.swing.JButton downLevel;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JMenuItem mainMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu ownerText;
    private javax.swing.JButton upLevel;
    // End of variables declaration//GEN-END:variables
}
